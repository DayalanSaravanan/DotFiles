Git User Manual
file:/usr/share/doc/git/html/user-manual.html
You can download default github .gitignore files for many programming languages here:
https://github.com/github/gitignore

man gittutorial, gittutorial-2, giteveryday, gitcore-tutorial

Git global setup:
git config --global user.name "D.Saravanan"
git config --global user.email "dayalsaravanan@gmail.com"

git config --list

git help config
man git-config

Create a new repository:
git clone https://gitlab.com/dsaravanan/Books.git
cd Books
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder:
cd existing folder
git init
git remote add origin https://gitlab.com/dsaravanan/Books.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository:
cd existing repo
git remote rename origin old-origin
git remote add origin https://gitlab.com/dsaravanan/Books.git
git push -u origin --all
git push -u origin --tags


# git pull example (git pull does a git fetch followed by a git merge)
git init .
git remote add origin https://gitlab.com/dsaravanan/dotfiles.git
git pull origin master # download all files and commits and overrides all files and 
commits in the existing repository
git add <filename>
git commit -m <commit message>
git push -u origin master
git status
git log | less / git log --stat | less

git branch
git branch <localbranchname>

git remote -v # list the web address of the repository

git rev-list @ -- file_name  # list commit message of that particular file
                               and No. of git commits that touched the file

for file in *.pdf; do echo -n "$file   "; git rev-list @ -- $file | wc -l; done


Note: read man page of gittutorial

git pull origin master # to update the repository of qutebrowser, lynis and sxiv
git checkout <filename> 
git reflog # manage reflog information
git diff hash1 hash2 

# to update
git status # to check the status of the remote repository
git pull origin master # to update the repository

# Delete the repository in Github
https://help.github.com/en/github/administering-a-repository/deleting-a-repository

# Practical git commands:
1. Configure User Profile
$ git config user.name "USERNAME"
$ git config user.email "user@example.com"
Add the --global option to set these policies globally.
$ git config --global user.name "USERNAME"
$ git config --global user.email "user@example.com"
2. Initialize Git Repositories
$ git init
3. Add Project Files
$ git add <file>
$ git add *.php
4. Verify Added Files
$ git status
5. Commit Changes to Repository
$ git commit  # invoke default Linux editor
$ git commit -m "commit message"
6. Display the Logs
$ git log # generalized information
$ git log <filename> # specific file information
7. Verify Project Branches
$ git branch # the output will mark the current branch with an asterisk
8. Reset Project Branches
$ git reset
$ git reset --soft
$ git reset --hard
9. Add a New Branch
$ git branch experimental # create a branch named experimental
10. Switch between Branches
$ git checkout experimental
11. Delete a Project Branch
$ git checkout master # switch to master branch
$ git branch -D experimental # delete experimental branch
12. Check Differences among Commits, Trees, and Files
$ git diff
$ git diff experimental master
13. Merge Two Branches
$ git merge experimental2 experimental1 
$ git merge -s ours experimental # merges experimental branch to current development branch
$ git merge --no-commit experimental # merges branch experimental to current branch
14. Revert Existing Commits
$ git revert <commit id> # revert changes introduced by <commit id>
$ git revert HEAD~3 # relapses the fourth last commit in HEAD and performs a new commit
15. Stash Working Directory
$ git stash
$ git stash list
16. Clone a Repository
$ git clone git://example.com/git.git
$ git clone git://example.com/git.git/ test-dir/ # will download said project into test-dir/17. Pull New Updates
$ git pull
18. Push Your Updates
$ git push
19. Display Remote Repositories
$ git remote
$ git remote --verbose
20. Connect to Remote Repositories
$ git remote add origin <server> # add 'origin' as the remote name to the server
21. Add Tags to Your Project
$ git tag 1.0.0 <commit id>
$ git log 
$ git push origin --tags
22. Fetch Remote Data
$ git fetch origin
23. Restore Non-Committed Changes
$ git restore --staged test.php
$ git restore --source=HEAD --staged --worktree test.php
24. Remove Files
$ git rm *.php
$ git rm -r dir/
$ git rm --cached *.php
25. Move or Rename Files
$ git mv test.py newtest.py
$ mv test.py newtest.py
$ git add newtest.py
$ rm test.py
26. Clean Untracked Files
$ git clean
$ git clean -n # options -f, -i, -n
27. Optimize Local Repositories
$ git gc
28. Archive Local Repositories
$ git archive --output=test 
29. Search for Patterns
$ git grep -iw 'import' master
$ git grep 'import' $(git rev-list --all)
30. Manage Working Trees
$ git worktree list
$ git worktree add new-branch
$ git worktree remove new-branch
$ git worktree prune
31. Prune Untracked Objects
$ git prune --dry-run
$ git prune --verbose --progress
32. Pack Unpacked Objects
$ git repack
33. List Unpacked Objects
$ git count-objects
34. Validate the Object Database
$ git fsck
35. Display Changes for Each Commit
$ git whatchanged
36. Summarize Log Information
$ git shortlog
$ git shortlog --email --summary
37. Manage Cnfiguration Options
$ git config --list
$ git config --help
38. Consult Git Help
$ git help
$ git --help
$ git <command> --help
$ git commit --help
39. Consult Manual Page
$ man git
$ man git commit
40. Display Version Information
$ git --version

# git
git rm <filename>  # delete/remove filename
git pull origin master --allow-unrelated-histories

# gitlab reference
https://gitlab.com/pages/plain-html
https://about.gitlab.com/stages-devops-lifecycle/pages/
https://about.gitlab.com/blog/2016/04/07/gitlab-pages-setup/
https://gitlab.com/html-themes/
