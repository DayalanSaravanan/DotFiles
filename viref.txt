File: viref.txt

Read: vimtutor, vim man page, 
/usr/share/vim/vim74/doc/^.txt  # The Vim documentation files
Use ":help doc-file-list" to get the complete list.

The default shift is eight spaces (right or left). This default can be changed with a 
command such as:
:set shiftwidth=4

vi provides automatic indentation control. To use it, issue the command:
:set autoindent

/usr/share/vim/vimrc    # system wide Vim initializations
~/.vimrc                # your personal Vim initializations

# Vi options  [~/.vimrc]
echo set number >> ~/.vimrc       # shows line numbers when vi opens a file
echo set nonumber >> ~/.vimrc     # don't show line numbers
echo syntax on >> ~/.vimrc        # turns on syntax highlighting
echo set tabstop=4 >> ~/.vimrc    # sets the tab size to 4 spaces (default is 8)
echo set autoindent >> ~/.vimrc   # carries over previous indent to the next line
echo set noautoindent >> ~/.vimrc # turn off autoindent
echo set showmatch >> ~/.vimrc    # show matching set of parentheses as they are typed
echo set noshowmatch >> ~/.vimrc  # turn off showmatch
echo set showmode >> ~/.vimrc     # display mode on last line of screen
echo set noshowmode >> ~/.vimrc   # turn of showmode

[ctrl] G # display the name of the current file and the cursor position in it

:1,4s/^/#/g       # s - substitute
:1,4s/^#/g        # uncomment
:%s/^/#/g         # comment all the lines in the file

# search and replace
:%s/apple/pear/g # replaces every occurances of apple with pear
:%s/apple/pear/gc # c can be added to the end to ask for confirmation 

ctrl+w and v for spliting screen vertically 

# editing multiple files at a time
vi file1 file2 file3
(First, vi will open file1. To switch to the next file (file2), we need to use the :n
command. When we want to return to the previous file, :N will do the job.)
:buffers  # the buffers command will show a list of the file currently being edited

Basic & Essential Vim Commands:
i - Enter insert mode
Esc - Enter command mode
x - Delete a character
X - Delete character in backspace mode
u - Undo changes
Ctrl+r - Redo changes
yy - Copy a line
dd - Delete a line
p - Paste the content of the buffer
/<search_term> - Search and then cycle through matches with n and N
[[ or gg - Move to the beginning of a file
]] or G -  Move to the end of a file
:%s/foo/bar/gci - Search and replace all occurrences with confirmation
Esc + :w - Save changes
Esc + :wq - Save and quit Vim
Esc + :q! - Force quit Vim discarding all changes

vi -d file1 file2 # Start in diff mode. There should be two, three or four file name
                     arguments. Vim will open all the files and show differences 
                     between them. Works like vimdiff(1).

vi -h # Give a bit of help about the command line arguments and options. After this
         Vim exits.

vi -l # Lisp mode. Sets the 'lisp' and 'showmatch' options on.

vi -m # Modifying files is disabled. Resets the 'write' option. You can still modify
         the buffer, but writing a file is not possible.

vi -M # Modifications not allowed. The 'modifiable' and 'write' options will be unset,
         so that changes are not allowed and files can not be written. Note that these
         options can be set to enable making modifications.

vim -v # Start Vim in Vi mode, just like the executable was called "vi". This only has
         effect when the executable is called "ex".

## Deleting characters, words and lines
x               delete the character at the cursor location
dw              delete the current word
D               delete the remainder of the line after the cursor
dd              delete the current line

## Looking for strings
/string # find the first occurrence of string after the cursor
?string # find the first occurrence of string before the cursor
n       # find the next occurrence in the last search


## Replacing strings
n,ps/str1/str2/g between line numbers n and p, substitute all (g:global) occurrences
                 of str1 by str2
1,$s/str1/str2/g in the whole file ($: last line), substitute all occurrences of
                 str1 by str2

Note: http://vimsheet.com/advanced.html

# all tabs into spaces
:ret
:se et (:set expandtab) # to make sure that any new lines will not use literal tabs

# To copy lines 1 through 20 of the current file to your current cursor position, use
this command:
:1,20 co .
