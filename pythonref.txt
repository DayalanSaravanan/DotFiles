Pythontic.com
Pythonic Permutations
Scipy Lecture Notes - https://scipy-lectures.org/
Book: Python Scripting for Computational Science 
Book: Think Python
https://southampton.ac.uk/~fangohr/training/python/pdfs/
PLOS - Computational Biology
https://www.physics.ohio-state.edu/undergrad/greStuff/

Creating a virtual environment:
In Python 3.6+, the recommended way to create a virtual environment is to run:
$ python3 -m venv /path/to/new/virtual/environment
Make sure that python3 resolves to whichever version of python3 you'd like to bind to
your virtual environment. For example, to create a new virtual environment for CS41
named cs41-env in your home directory, you could run:
$ python3 -m venv ~/cs41-env

Activation and Deactivation:
To activate a virtual environment on macOS or Linux running bash or zsh, source the
following path:
$ source ~/cs41-env/bin/activate 
https://github.com/stanfordpython/python-handouts/blob/master/virtual-environment.md

which python3      # installation search path of python3
/usr/bin/python3   # in Ubuntu 16.04

When a script file is used, it is sometimes useful to be able to run the script and 
enter interactive mode afterwards. This can be done by passing -i before the script.
>>> python3 -i script.py

!pydoc numpy       # documentation for numpy in ipython

Example:
#!/usr/bin/env python3
from math import sin
import sys
x = float(sys.argv[1])
print('sin({0}) = {1}'.format(x, sin(x)))
print('sin({x:q}) = {s:.3f}'.format(x=x, s=sin(x)))

# curly brackets are place holders - {0}, {1}

Print Statements:
x = 0.8
print("The value of x is", x)
print("sin(%f) = %f" %(x, sin(x)))
print("sin(%.2f) = %.2f" %(x, sin(x)))
print("sin({0}) = {1}".format(x, sin(x)))
print("sin({x:q}) = {s:.3f}".format(x=x, s=sin(x)))

Complex Numbers:
a = 1+2j
b = 3-5j
print(a*b)

Logrithm:
from math import log10
log10(5)

Special characters in strings:
s = "\"This is a quote\" and \n here comes a backslash: \\"
print(s)
"This is a quote" and
here comes a backslash: \

String concatenation:
Strings can be glued together with the + and the * operators 
"hello "*3 + "world"
'hello hello hello world'
quote = 'I will not eat chips all day"
(quote + ", ")*10 + quote
"1"*10 = 1111111111
int("1")*10 = 10

Slicing:
You can extract a sub-string with the [start:end] slicing notation:
quote[2:6]
'will'
If the start argument is left out, the substring will start from the first charachter:
quote[:6] # I will
quote[7:] # not eat chips all day
Negative indices can be used to index "from the right":
| c | h | i | p | s |
0   1   2   3   4   5
-5 -4  -3  -2  -1   0

'chips'[1:-2]
'hi'

Python strings ar
   

import numpy as np
dir(np)
help(np.zeros)

chmod u+x file.py 
./file.py

import this # Zen of Python

# exit
CTRL-D  # to exit python
quit()/exit()

Pip (recursive acronym for "Pip installs Packages") is a cross platform package manager
for installing and managing Python packages (which can be found in the Python Package
Index (PyPI)) 

# string formaat code
%s     string
%c     character
%d     integer
%f     floating pointer
%o     octal number
%x     hexadecimal number
%e     scientific notation

# install
sudo python3 -m pip install pandas
sudo python3 -m pip install numpy
sudo python3 -m pip install scipy
sudo python3 -m pip install sympy
sudo python3 -m pip install matplotlib
sudo python3 -m pip install matplotlib-venn
sudo python3 -m pip install fmcw
sudo python3 -m pip install pylint
sudo python3 -m pip install bokeh
sudo python3 -m pip install keras
sudo python3 -m pip install theano
sudo python3 -m pip install tensorflow
sudo python3 -m pip install num2word
sudo python3 -m pip install num2words
sudo python3 -m pip install seaborn

# upgrade
sudo python3 -m pip install --upgrade pip
sudo python3 -m pip install --upgrade pylint
sudo python3 -m pip install --upgrade matplotlib
sudo python3 -m pip install --upgrade youtube-dl

# search
sudo python3 -m pip search packagename

# list
sudo python3 -m pip list | less -N

# help
sudo python3 -m pip help | less 
(To see a list of all commands type)

# pip
Usage: sudo python3 -m pip <command> [options]
Commands:
install            Install packages
download           Download packages
uninstall          Uninstall packages
freeze             Output installed packages in requirements format
list               List installed packages
show               Show information about installed packages
check              Verify installed packages have compatible dependencies
search             Search PyPI for packages
wheel              Build wheels from your requirements
hash               Compute hashes of package archives
completion         A helper command used for command completion
help               Show help for commands

# to check installed
python3 -c "import numpy"
python3 -c "import sklearn"

# pylint
sudo pylint file.py

time = [time for time in np.linspace(0, 40, 10) for n in range(2)]
print(time)
[0.0, 0.0, ... 40.0, 40.0]

time = [np.linspace(0, 40, 10) for n in range(2)]
print(time)
[array([0., ... 40.]), array([0., ... 40.])]

time = 2*[np.linspace(0, 40, 10)] # result is same as above
print(time)
[array([0., ... 40.]), array([0., ... 40.])]

# to check the architecture of python installed
import platform, sys
platform.architecture(), sys.maxsize

import numpy as np
np.__version__

# for reference
/usr/local/lib/python3.5/dist-packages/numpy/core/function_base.py

# to find the python architecture
import platform
platform.architecture()

Matplotlib gallery:
https://matplotlib.org/gallery.html
https://github.com/rasbt/matplotlib-gallery
http://nbviewer.ipython.org/github/cs109/content/blob/master/
lec_03_statistical_graphs.ipynb
		    
Matplotlib examples:
https://matplotlib.org/1.3.1/examples/
https://github.com/jbmouret/matplotlib_for_papers
https://www.programcreek.com/python/example/102352/
matplotlib.pyplot.ticklable_format

# to list available style format
import matplotlib.pyplot as plt
plt.style.available

Python - https://www.python.org/
Python Course - https://www.python-course.eu/index.php
Scipy Cookbook 
https://scipy-cookbook.readthedocs.io/items/FrequencySweptDemo.html
https://book.pythontips.com/en/latest/index.html

# Some examples

x = [1,3,5,7,9]
sum_squared = 0

for i in range(len(x)):
	sum_squared+=x[i]**2

for y in x:
	sum_squared+=y**2

x = [1,3,5,7,9]
sum_squared = sum([y**2 for y in x])  # pythonic way

x = [1,2,3,4,5,6,7,8,9]
even_squared = [y**2 for y in x if y%2==0]
squared_cubed = [y**2 if y%2==0 else y**3 for y in x]


# Dictionary comprehension

x = [1,2,3,4,5,6,7,8,9]
{k:k**2 for k in x}
{k:k**2 for k in x if x%2==0}
{k:k**2 if k%2==0 else k**3 for k in x}


# Pandas
import pandas as pd

# reading data
data = pd.read_csv('file.csv')  
data = pd.read_csv('file.csv', sep=';', encoding='latin-1', nrows=1000, skiprows=[2,5])
# (read_csv, read_excel, read_clipboard, read_sql)

# writing data
data.to_csv('file.csv', index=None)
# index=None will simply write the data as it is. If you don't write index=None, you'll
get an additional first column of 1,2,3,... until the last row.
# (.to_excel, .to_json, .to_pickle, .to_clipboard)

# checking the data
data.shape        # gives (#rows, #columns)
data.describe()   # Compute basic statistics

# seeing the data
data.head(3)
# Print the first 3 rows of the data. Similarly to .head(), .tail() will look at the
last rows of the data.
data.loc[8] # Print the 8th row
data.loc[8, 'column_1'] # Print the value of the 8th row on 'column_1'
data.loc[range(4,6)] # Subset from row 4 to 6(excluded)

To be continue...

Source: https://towardsdatascience.com/be-a-more-efficient-data-scientist-today-master-
pandas-with-this-guide-ea362d27386

# 23 Pandas codes for Data Science
1. read in a CSV dataset
pd.DataFrame.from_csv("csv_file") or pd.read_csv("csv_file")
2. read in an excel dataset
pd.read_excel("excel_file")
3. write your data frame directly to csv
df.to_csv("data.csv", sep=",", index=False)
4. basic dataset feature info
df.info()
5. basic dataset statistics
print(df.describe())
6. print data frame in a table
print(tabulate(print_table, headers=headers))
7. list the column names
df.columns
8. drop missing data
df.dropna(axis=0, how='any')
9. replace missing data
df.replace(to_replace=None, value=None)
10. check for NANs
pd.isnull(object)
11. drop a feature
df.drop('feature_variable_name', axis=1)  # axis is either 0 for rows, 1 for columns
12. convert object type to float
pd.to_numeric(df["feature_name"], errors='coerce')
13. convert data frame to numpy array
df.as_matrix()
14. get first "n" rows of a data frame
df.head(n)
15. get data by feature name
df.loc[feature_name]
16. apply a function to a data frame
df["height"].apply(lambda height: 2 * height)
or
def multiply(x):
	return x*2

df["height"].apply(multiply)
17. renaming a column
df.rename(columns = {df.columns[2]: 'size'), inplace=True)
18. get the unique entries of a column
df["name"].unique()
19. accessing sub-data frames
new_df = df[["name", "size"]]
20. summary information about your data
df.sum()   # sum of values in a data frame
df.min()   # lowest value of a data frame
df.max()   # highest value
df.idxmin() # index of the lowest value
df.idxmax() # index of the highest value
df.describe() # statistical summary of the data frame, with quartiles, median, etc.
df.mean()   # average values
df.median() # median values
df.corr()   # correlation between columns
df["size"].median() # to get these values for only one column
21. sorting your data
df.sort_values(ascending=False)
22. boolean indexing
df[df["size"] == 5]
23. selecting values
df.loc([0], ['size'])


t = [0.00 0.31 0.59 .90 1.21 1.48 1.81]
dt = mean(diff(t))
st = std(diff(t))  # standard deviation of diff(t)
F = 1/dt

time = np.linspace(0, 10, 5)            for n in range(5):
for n in range(len(time)):              	time = np.linspace(0, 10, 5)
	print(n, time)                          print(n, time)


a = 1 + 2 + 3 + \                       a = (1 + 2 + 3 +
    4 + 5 + 6 + \                            4 + 5 + 6 +
    7 + 8 + 9                                7 + 8 + 9)


# 10 Python tips and tricks for writing better code 

1. Ternary Operatior 
In computer science, a ternary operator is an operator that takes three arguments (or
operands). The arguments and result can be of different types.

condition = True             condition = True
                            
if condition:                x = 1 if condition else 0  # ternary condition
	x = 1                
else:                        print(x)
	x = 0

print(x)

2. working with large numbers

num1 = 10000000000           num1 = 10_000_000_000
num2 = 100000000             num2 = 100_000_000
total = num1 + num2          total = num1 + num2
print(total)                 print(f'{total:,}')

3. context manager

f = open('test.txt', 'r')                 with open('test.txt', 'r') as f:
file_contents = f.read()                  	file_contents = f.read()
f.close()                                  

words = file_contents.split(' ')          words = file_contents.split(' ')
word_count = len(words)                   word_count = len(words)
print(word_count)                         print(word_count)

# Opening two files at the same time with one 'with' statement
with open("file1", "r") as source, open("file2", "w") as destination:
	destination.write(source.read())

4. enumerate function - return both index and value

names = ['Corey', 'Chris', 'Dave', 'Travis']  "" 
                                         
index = 0                                
for name in names:                       
	print(index, name)
	index += 1

names = ['Corey', 'Chris', 'Dave', 'Travis']

for index, name in enumerate(names):    # default count from 0
for index, name in enumerate(names, start=1):
	print(index, name)

5. zip function (unpacking) - loop over two or more lists at once

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']
heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']

for index, name in enumerate(names):
	hero = heroes[index]
	print(f'{name} is actually {hero}')

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']
heroes = ['Spiderman', 'Superman', 'Deadpoolv, 'Batman']

for name, hero in zip(names, heroes):
	print(f'{name} is actually {hero}')

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']
heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']
universes = ['Marvel', 'DC', 'Marvel', 'DC']

for name, hero, universe in zip(names, heroes, universes):
	print(f'{name} is actually {hero} from {universe}')

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']
heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']
universes = ['Marvel', 'DC', 'Marvel', 'DC']

# to print tuples of all three values
for value in zip(names, heroes, universes):
	print(value)

6. To be continue ...

# Pylint
sudo pylint file.py

# Valgrind in Python
valgrind python3 file.py  # to use valgrind
valgrind --tool=massif python3 file.py # use of memory during program execution

# tabs into spaca (to fix python indentation)
pip install autopep8
autopep8 script.py # print only
autopep8 -i script.py # write file

On most UNIX-like systems, can also run:
expand -t4 oldfile.py > newfile.py
from the command line, changing the number if you want to repalce tabs with a number of
spaces other than 4. You can easily write a shell script to do this with a bunch of 
files at once, retaining the original file names.

# profiling in python
sudo python3 -m cProfile file.py > file.log

# Array
a = np.array([11, 12, 13, 14])
b = np.array([1, 2, 3, 4])
c = a - b  # array subtraction
b**2       # squating an array
np.cos(b)  # a trigonometric function performed on the array
b < 2      # conditional operations

# help
import numpy
help(numpy)

# use 'enumerate' function in loops instead of creating an 'index' variable
Harmful:
my_container = ['Larry', 'Moe', 'Curly']
index = 0
for element in my_container:
	print('{} {}'.format(index, element))
	index += 1

Idiomatic:
my_container = ['Larry', 'Moe', 'Curly']
for index, element in enumerate(my_container):
	print('{} {}'.format(index, element))


# Tips and Tricks in Python

1. Swapping of Two numbers
x, y = 10, 20
print(x, y)
Result: 10 20
x, y = y, x
print(x, y)
Result: 20 10 

2. Reversing a string in Python
a = "GeeksForGeeks"
print("Reverse is", a[::-1])
Result: Reverse is skeeGroFskeeG

3. Create a single string from all the elements in list
a = ["Geeks", "For", "Geeks"]
print(" ".join(a))
Result: Geeks For Geeks

4. Chaining of Comparison Operatorst
n = 10
result = 1 < n  n <= 9
print(result)
Result: True
	False

5. Print the file path of imported modules
import os;
import socket;
print(os)
print(socket)

6. Use of Enums
class MyName:
	Geeks, For, Geeks = range(3)
print(MyName.Geeks)
print(MyName.For)
print(MyName.Geeks)
Result: 2
	1	
	2	

7. Return multiple values from functions
def x():
	return 1, 2, 3, 4
a, b, c, d = x()
print(a, b, c, d)
Result: 1 2 3 4

8. Find the most frequent value in a list
test = [1, 2, 3, 4, 2, 2, 3, 1, 4, 4, 4]
print(max(set(test), key = test.count))
Result: 4

# Lists
empty_list = list()
also_empty_list = []
zeros_list = [0] * 5
print(zeros_list]
>>> [0, 0, 0, 0, 0]
empty_list.append(1)
print(empty_list)
>>> [1]
print(len(empty_list))
>>> 1

# List indexing
list_var = range(10)
print(list_var)
>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(list_var[4])
>>> 4
print(list_var[4:7])
>>> [4, 5, 6]
print(list_var[0::3])  # empty index means to the beginning/end
>>> [0, 3, 6, 9]
print(list_var)
>>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(list_var[-1])
>>> 9
print(list_var[::-1])
>>> [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
print(list_var[3:1:-1])
>>> [3, 2]

# Dictionaries 
empty_dict = ()
also_empty_dict = {}
filled_dict = (3: 'Hello, ', 4: 'world!')
print(filled_dict[3] + filled_dict[4])
>>> Hello, World!
filled_dict[5] = 'New String'
print(filled_dict)
>>> (3: 'Hello, ', 4: 'World!', 5: 'New String') 
del filled_dict[3]
print(filled_dict)
>>> (4: 'World!', 5: 'New String')
print(len(filled_dict))
>>> 2

# Functions, Lambda functions
def add_numbers(a, b):
	return a + b

print(add_numbers(3, 4))
>>> 7

lambda_add_numbers = lambda a, b: a + b
print(lambda_add_numbers(3, 4))
>>> 7

# Loops, List and Dictionary Comprehensions
for i in range(10):
	print('Looping %d' %i)
>>> looping 0
...
>>> looping 9

filled_list = [a/2 for a in range(10)]
print(filled_list)
>>> [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]

filled_dict = (a:a**2 for a in range(5)]
print(filled_dict)
>>> (0: 0, 1: 1, 2: 4, 3: 9, 4: 16)

# zip
L1 = [1,2,3,4]
L2 = [5,6,7,8]
In: list(zip(L1,L2))
Out: [(1,5), (2,6), (3,7), (4,8)]
In: for (x,y) in zip(L1,L2):
	print(x, y, '--', x+y)
Out: 1 5 -- 6
     ........
     4 8 -- 12

# Python Lambda Functions
def average(x, y):
	return (x+y)/2
avg = average(2, 5)
average = lambda x, y: (x+y)/2

var = [1, 5, -2, 3, -7, 4]
sorted_var = sorted(var)

Ref: https://www.pythonforthelab.com/blog/intro-to-python-lambda-functions/ 

# Beyond the for-loop

integers = range(0, 10)
even = []
for i in integers:
	if i%2 == 0:
		even.append(i)

>>> even
>>> [0, 2, 4, 6, 8]

integers = range(0, 10)
even = filter(lambda x: x%2 == 0, integers)

integers = range(0, 10)
def is_even(x):
	return x%2 == 0

even = filter(is_even, integers)

integers = range(0, 10)
even = [x for x in integers if x%2 == 0]

# Map
integers = range(0, 10)
list(map(lambda x: x*x, integers))

>>> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

integers = range(0, 10)
[x*x for x in integers]

>>> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Reduce
from functools import reduce

integers = range(1, 10)
reduce(lambda x, y: x*y, integers)

>>> 362880

# Sum
integers = range(1, 10)
sum(integers)

>>> 45

# Any and All

any([False, True, False])
>>>True

all([False, True, False])
>>> False

To check for even numbers in a list:

integers = range(1, 10)
any(x%2 == 0 for x in integers)
>>> True

all(x%2 == 0 for x in integers)
>>> False

# List Methods
list.append(x)
list.extend(iter)
list.insert(i, x)
list.remove(x)
list.clear()
list.copy()
list.reverse()
list.pop([i])
list.sort()

# format text
greeting = 'Hello'
name = 'Raman'

message = '{}, {}. Welcome!'.format(greeting, name)
message = f'{greeting), {name}. Welcome!'
print(message)

$ Hello, Raman. Welcome!

message = f'{greeting}, {name.upper()}. Welcome!'
print(message)

$ Hello, RAMAN. Welcome!

print(dir(name))        # dir function
print(help(str))        # help function
print(help(str.lower))  # help function

Creating a vector:
vector_row = np.array([1, 2, 3])
vector_col = np.array([[1], [2]. [3]])
Creating a matrix:
matrix = np.array([[1,2], [1,2], [1,2]])
matrix_obj = np.mat([[1,2], [1,2], [1,2]])
